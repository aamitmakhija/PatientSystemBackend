name: CI/CD Pipeline

on:
  push:
    branches:
      - RejoizBranch
# pull_request:
#   branches:
#     - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.20.1'
    
    - name: Clean installation
      run: |
        rm -rf node_modules
        rm -f package-lock.json
        npm cache clean --force    

    - name: Install dependencies
      run: |
        npm install bcryptjs@3.0.2 --save
        npm install --no-package-lock --legacy-peer-deps

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/patientsystembackend:latest
          ${{ secrets.DOCKER_USERNAME }}/patientsystembackend:${{ github.sha }}
      
      

    # - name: Install dependencies
    #   run: npm install

    # - name: Run tests
    #   run: npm test

  deploy:
    needs: build
    runs-on: [aws-ec2]
    steps:
    - name: Pull image from docker hub
      run: docker pull ${{ secrets.DOCKER_USERNAME }}/patientsystembackend:latest
      
    - name: Delete existing container
      run:  docker rm -f patientsystembackend-container || true
    - name: Run docker container
      run:  docker run -d -p 5001:5001 --name patientsystembackend-container  ${{ secrets.DOCKER_USERNAME }}/patientsystembackend:latest

    # - name: Checkout code
    #   uses: actions/checkout@v2

    # - name: Set up SSH key for deployment
    #   run: |
    #     echo "${{ secrets.DEPLOY_KEY }}" > deploy_key
    #     chmod 600 deploy_key
    #     eval $(ssh-agent -s)
    #     ssh-add deploy_key
    #     mkdir -p ~/.ssh
    #     ssh-keyscan github.com >> ~/.ssh/known_hosts

    # - name: Deploy to production
    #   run: ssh user@your-server "cd /path/to/your/app && git pull && pm2 restart all"
    #   env:
    #     DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

    # - name: Checkout code
    #   uses: actions/checkout@v2

    # - name: Set up SSH key for deployment
    #   run: |
    #     echo "${{ secrets.DEPLOY_KEY }}" > deploy_key
    #     chmod 600 deploy_key
    #     eval $(ssh-agent -s)
    #     ssh-add deploy_key
    #     mkdir -p ~/.ssh
    #     ssh-keyscan github.com >> ~/.ssh/known_hosts

    # - name: Deploy to production
    #   run: ssh user@your-server "cd /path/to/your/app && git pull && pm2 restart all"
    #   env:
    #     DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}